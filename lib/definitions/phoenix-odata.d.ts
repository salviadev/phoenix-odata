// Generated by dts-bundle v0.4.3

declare module 'phoenix-odata' {
    export { OdataParser, Expression } from 'phoenix-odata/lib/odata/index';
    export { $filter2mongoFilter } from 'phoenix-odata/lib/mongodb/odata-filter';
}

declare module 'phoenix-odata/lib/odata/index' {
    export { Operator } from 'phoenix-odata/lib/odata/parser/operators';
    export { OdataParser, Expression } from 'phoenix-odata/lib/odata/parser/parser';
    export { TokenType, Token } from 'phoenix-odata/lib/odata/parser/token';
}

declare module 'phoenix-odata/lib/mongodb/odata-filter' {
    export function $filter2mongoFilter(filter: string): any;
}

declare module 'phoenix-odata/lib/odata/parser/operators' {
    export class Operator {
        code: string;
        text: string;
        precedence: number;
        isPrefix: boolean;
        isInfix: boolean;
        isAssociative: boolean;
        isPredicate: boolean;
        isOperator: boolean;
        isFunction: boolean;
        constructor(code: string, text: string, precedence: number, isPrefix: boolean, isInfix: boolean, isAssociative: boolean, isPredicate: boolean);
        toString(): string;
    }
    export class Operators {
        constructor();
        byName(opName: string): Operator;
    }
    export var operators: Operators;
}

declare module 'phoenix-odata/lib/odata/parser/parser' {
    export class Expression {
        children: Expression[];
        type: string;
        value: any;
        svalue: string;
        dataType: string;
        constructor(config: any);
        isPredicate(): boolean;
        toString(): string;
    }
    export class Parser {
        constructor();
        parse(str: string): Expression;
        parseNe(str: string): Expression;
    }
    export var OdataParser: Parser;
}

declare module 'phoenix-odata/lib/odata/parser/token' {
    export const TokenType: {
        identifier: string;
        operator: string;
        literal: string;
        func: string;
    };
    export class Token {
        type: string;
        dataType: string;
        value: any;
        svalue: string;
        constructor(type: string, value: any, line: string, offset: number, dataType: string);
        matches: (code: string) => boolean;
        getRemainingText: () => string;
    }
    export function tokenize(line: string): Token[];
}

